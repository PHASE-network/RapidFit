// -*- mode: c++ -*-
// 
// File Bs2PhiPhi_AccCorrMDF.cxx generated by TMultiDimFit::MakeRealCode
// on Fri Jan 13 14:12:52 2012
// ROOT version 5.30/03
//
// This file contains the function 
//
//    double  Bs2PhiPhi_AccCorr::MDF(double *x); 
//
// For evaluating the parameterization obtained
// from TMultiDimFit and the point x
// 
// See TMultiDimFit class documentation for more information 
// 
#include "Bs2PhiPhi_AccCorr.h"
//
// Static data variables
//
int    Bs2PhiPhi_AccCorr::gNVariables    = 3;
int    Bs2PhiPhi_AccCorr::gNCoefficients = 35;
double Bs2PhiPhi_AccCorr::gDMean         = 1.02619;
// Assignment to mean vector.
double Bs2PhiPhi_AccCorr::gXMean[] = {
  1.33227e-15, 1.11022e-16, -2.22045e-16 };

// Assignment to minimum vector.
double Bs2PhiPhi_AccCorr::gXMin[] = {
  -1.04, -1.04, -3.1416 };

// Assignment to maximum vector.
double Bs2PhiPhi_AccCorr::gXMax[] = {
  1.04, 1.04, 3.26726 };

// Assignment to coefficients vector.
double Bs2PhiPhi_AccCorr::gCoefficient[] = {
  -0.0271465,
  -0.0524006,
  -0.060395,
  -0.030806,
  0.0242689,
  -0.032486,
  0.0264684,
  -0.0399939,
  -0.0165397,
  0.00858238,
  -0.00895465,
  0.0120669,
  -0.00556458,
  -0.0228186,
  -0.00779891,
  -0.00736891,
  0.0141032,
  0.00842185,
  -0.00525695,
  0.0106521,
  -0.00566135,
  -0.00467927,
  -0.00495444,
  0.00921747,
  0.00326737,
  0.00718625,
  -0.00144479,
  0.00165673,
  -0.00413952,
  -0.000819268,
  -0.000577105,
  -0.000353463,
  -0.000500031,
  0.000206647,
  -0.000160182
 };

// Assignment to error coefficients vector.
double Bs2PhiPhi_AccCorr::gCoefficientRMS[] = {
  3.59727e-11,
  3.4962e-11,
  3.48383e-11,
  5.30904e-11,
  9.72266e-12,
  9.84885e-11,
  1.83991e-11,
  5.49924e-11,
  1.09945e-11,
  9.21392e-12,
  2.78486e-11,
  1.09679e-11,
  9.69264e-12,
  4.32093e-11,
  1.78622e-11,
  4.32241e-11,
  1.64675e-11,
  2.1357e-11,
  2.2554e-11,
  4.03477e-11,
  4.10822e-11,
  1.17853e-11,
  2.78362e-11,
  4.63922e-11,
  1.30046e-11,
  1.01081e-11,
  1.01592e-11,
  6.80381e-12,
  4.79808e-11,
  1.26703e-11,
  2.31974e-11,
  6.98598e-12,
  4.22066e-11,
  1.74942e-11,
  2.11243e-11
 };

// Assignment to powers vector.
// The powers are stored row-wise, that is
//  p_ij = Bs2PhiPhi_AccCorr::gPower[i * NVariables + j];
int    Bs2PhiPhi_AccCorr::gPower[] = {
  1,  1,  1,
  3,  1,  1,
  1,  3,  1,
  3,  3,  1,
  1,  1,  2,
  2,  2,  1,
  1,  3,  2,
  2,  2,  3,
  2,  1,  4,
  1,  1,  3,
  2,  3,  1,
  1,  2,  3,
  1,  4,  1,
  2,  2,  2,
  3,  1,  2,
  4,  2,  1,
  1,  4,  2,
  3,  1,  3,
  2,  1,  1,
  1,  2,  2,
  2,  1,  2,
  2,  1,  3,
  3,  2,  1,
  3,  2,  2,
  1,  5,  1,
  1,  2,  4,
  4,  1,  1,
  1,  1,  5,
  2,  3,  2,
  5,  1,  1,
  1,  2,  1,
  1,  1,  4,
  2,  4,  1,
  4,  1,  2,
  1,  3,  3
};

// 
// The method   double Bs2PhiPhi_AccCorr::MDF(double *x)
// 
double Bs2PhiPhi_AccCorr::MDF(double *x) {
  double returnValue = Bs2PhiPhi_AccCorr::gDMean;
  int    i = 0, j = 0, k = 0;
  for (i = 0; i < Bs2PhiPhi_AccCorr::gNCoefficients ; i++) {
    // Evaluate the ith term in the expansion
    double term = Bs2PhiPhi_AccCorr::gCoefficient[i];
    for (j = 0; j < Bs2PhiPhi_AccCorr::gNVariables; j++) {
      // Evaluate the polynomial in the jth variable.
      int power = Bs2PhiPhi_AccCorr::gPower[Bs2PhiPhi_AccCorr::gNVariables * i + j]; 
      double p1 = 1, p2 = 0, p3 = 0, r = 0;
      double v =  1 + 2. / (Bs2PhiPhi_AccCorr::gXMax[j] - Bs2PhiPhi_AccCorr::gXMin[j]) * (x[j] - Bs2PhiPhi_AccCorr::gXMax[j]);
      // what is the power to use!
      switch(power) {
      case 1: r = 1; break; 
      case 2: r = v; break; 
      default: 
        p2 = v; 
        for (k = 3; k <= power; k++) { 
          p3 = p2 * v;
          p3 = 2 * v * p2 - p1; 
          p1 = p2; p2 = p3; 
        }
        r = p3;
      }
      // multiply this term by the poly in the jth var
      term *= r; 
    }
    // Add this term to the final result
    returnValue += term;
  }
  return returnValue;
}

// EOF for Bs2PhiPhi_AccCorrMDF.cxx
